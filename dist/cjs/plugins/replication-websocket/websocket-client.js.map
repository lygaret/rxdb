{"version":3,"file":"websocket-client.js","names":["_index","require","_reconnectingWebsocket","_interopRequireDefault","_isomorphicWs","_index2","_rxjs","_rxError","ensureIsWebsocket","w","is","CLOSING","console","dir","Error","createWebSocketClient","options","IsomorphicWebSocket","wsClient","ReconnectingWebSocket","url","WebSocket","connected$","BehaviorSubject","message$","Subject","error$","onerror","err","log","emitError","newRxError","errors","direction","next","Promise","res","onopen","headers","authMessage","collection","name","id","randomToken","params","method","send","JSON","stringify","onclose","onmessage","messageObj","message","parse","data","socket","replicateWithWebsocketServer","websocketClient","messages$","requestCounter","requestFlag","getRequestId","count","database","token","replicationState","replicateRxCollection","replicationIdentifier","live","pull","batchSize","stream$","pipe","filter","msg","map","result","handler","lastPulledCheckpoint","requestId","request","firstValueFrom","push","docs","subscribe","subjects","error","isConnected","reSync","streamRequest","onClose","close"],"sources":["../../../../src/plugins/replication-websocket/websocket-client.ts"],"sourcesContent":["import {\n    replicateRxCollection,\n    RxReplicationState\n} from '../replication/index.ts';\nimport {\n    WebsocketClientOptions,\n    WebsocketMessageType\n} from './websocket-types.ts';\n\nimport ReconnectingWebSocket from 'reconnecting-websocket';\n\nimport IsomorphicWebSocket from 'isomorphic-ws';\nimport {\n    errorToPlainJson,\n    randomToken,\n    toArray\n} from '../../plugins/utils/index.ts';\nimport {\n    filter,\n    map,\n    Subject,\n    firstValueFrom,\n    BehaviorSubject\n} from 'rxjs';\nimport type {\n    RxError,\n    RxReplicationWriteToMasterRow\n} from '../../types/index.d.ts';\nimport { newRxError } from '../../rx-error.ts';\n\nexport type WebsocketClient = {\n    url: string;\n    socket: any;\n    connected$: BehaviorSubject<boolean>;\n    message$: Subject<any>;\n    error$: Subject<RxError>;\n};\n\n\n/**\n * Copied and adapted from the 'reconnecting-websocket' npm module.\n * Some bundlers have problems with bundling the isomorphic-ws plugin\n * so we directly check the correctness in RxDB to ensure that we can\n * throw a helpful error.\n */\nexport function ensureIsWebsocket(w: typeof IsomorphicWebSocket) {\n    const is = typeof w !== 'undefined' && !!w && w.CLOSING === 2;\n    if (!is) {\n        console.dir(w);\n        throw new Error('websocket not valid');\n    }\n}\n\n\nexport async function createWebSocketClient<RxDocType>(options: WebsocketClientOptions<RxDocType>): Promise<WebsocketClient> {\n    ensureIsWebsocket(IsomorphicWebSocket);\n    const wsClient = new ReconnectingWebSocket(\n        options.url,\n        [],\n        {\n            WebSocket: IsomorphicWebSocket\n        }\n    );\n    const connected$ = new BehaviorSubject<boolean>(false);\n    const message$ = new Subject<any>();\n    const error$ = new Subject<any>();\n    wsClient.onerror = (err) => {\n\n        console.log('--- WAS CLIENT GOT ERROR:');\n        console.log(err);\n\n        const emitError = newRxError('RC_STREAM', {\n            errors: [new Error(\"was client error\")],\n            direction: 'pull'\n        });\n        error$.next(emitError);\n    };\n    await new Promise<void>(res => {\n        wsClient.onopen = () => {\n\n            if (options.headers) {\n                const authMessage: WebsocketMessageType = {\n                    collection: options.collection.name,\n                    id: randomToken(10),\n                    params: [options.headers],\n                    method: 'auth'\n                };\n                wsClient.send(JSON.stringify(authMessage));\n            }\n\n            connected$.next(true);\n            res();\n        };\n    });\n    wsClient.onclose = () => {\n        connected$.next(false);\n    };\n\n    wsClient.onmessage = (messageObj) => {\n        const message = JSON.parse(messageObj.data);\n        message$.next(message);\n    };\n\n    return {\n        url: options.url,\n        socket: wsClient,\n        connected$,\n        message$,\n        error$\n    };\n\n}\n\nexport async function replicateWithWebsocketServer<RxDocType, CheckpointType>(\n    options: WebsocketClientOptions<RxDocType>\n): Promise<RxReplicationState<RxDocType, CheckpointType>> {\n    const websocketClient = await createWebSocketClient(options);\n    const wsClient = websocketClient.socket;\n    const messages$ = websocketClient.message$;\n\n    let requestCounter = 0;\n    const requestFlag = randomToken(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return options.collection.database.token + '|' + requestFlag + '|' + count;\n    }\n    const replicationState = replicateRxCollection<RxDocType, CheckpointType>({\n        collection: options.collection,\n        replicationIdentifier: options.replicationIdentifier,\n        live: options.live,\n        pull: {\n            batchSize: options.batchSize,\n            stream$: messages$.pipe(\n                filter(msg => msg.id === 'stream' && msg.collection === options.collection.name),\n                map(msg => msg.result)\n            ),\n            async handler(lastPulledCheckpoint: CheckpointType | undefined, batchSize: number) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterChangesSince',\n                    params: [lastPulledCheckpoint, batchSize]\n                };\n                wsClient.send(JSON.stringify(request));\n                const result = await firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n                return result;\n            }\n        },\n        push: {\n            batchSize: options.batchSize,\n            handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterWrite',\n                    params: [docs]\n                };\n                wsClient.send(JSON.stringify(request));\n                return firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n            }\n        }\n    });\n\n    websocketClient.error$.subscribe(err => replicationState.subjects.error.next(err));\n\n    websocketClient.connected$.subscribe(isConnected => {\n        if (isConnected) {\n            /**\n             * When the client goes offline and online again,\n             * we have to send a 'RESYNC' signal because the client\n             * might have missed out events while being offline.\n             */\n            replicationState.reSync();\n\n            /**\n             * Because reconnecting creates a new websocket-instance,\n             * we have to start the changestream from the remote again\n             * each time.\n             */\n            const streamRequest: WebsocketMessageType = {\n                id: 'stream',\n                collection: options.collection.name,\n                method: 'masterChangeStream$',\n                params: []\n            };\n            wsClient.send(JSON.stringify(streamRequest));\n        }\n    });\n\n    options.collection.onClose.push(() => websocketClient.socket.close());\n    return replicationState;\n}\n"],"mappings":"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","ignoreList":[]}